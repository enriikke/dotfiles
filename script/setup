#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
  echo -e "${BLUE}=== $1 ===${NC}"
}

# Detect OS
if [[ "$OSTYPE" == "darwin"* ]]; then
  OS="macos"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  OS="linux"
else
  print_error "Unsupported operating system: $OSTYPE"
  exit 1
fi

print_status "Detected OS: $OS"

# Install Homebrew (works on both macOS and Linux now!)
install_homebrew() {
  print_header "Installing Homebrew"

  if command -v brew > /dev/null 2>&1; then
    print_status "Homebrew already installed"
    return 0
  fi

  print_status "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Initialize Homebrew environment for current session
  if [[ "$OS" == "macos" ]]; then
    if [[ -x "/opt/homebrew/bin/brew" ]]; then
      # macOS Apple Silicon
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -x "/usr/local/bin/brew" ]]; then
      # macOS Intel
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  else
    # Linux
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi

  print_status "âœ“ Homebrew installed and configured"
}

# Install all development tools via Homebrew
install_dev_tools() {
  print_header "Installing Development Tools"

  local tools=(
    # Shell and core utilities
    "zsh"
    "starship"
    "fzf"
    "eza"           # Modern ls replacement
    "bat"           # Modern cat replacement
    "ripgrep"       # Modern grep replacement
    "fd"            # Modern find replacement
    "zoxide"        # Smart cd replacement
    "git"
    "gh"            # GitHub CLI
    "mosh"          # Better SSH
    "stow"          # Symlink farm manager for dotfiles

    # Development tools
    "neovim"
    "tmux"
    "fnm"          # Fast Node.js version manager
    "go"

    # Additional useful tools
    "jq"            # JSON processor
    "yq"            # YAML processor
    "tree"          # Directory tree viewer
    "htop"          # Better top
    "curl"
    "wget"
    # gnupg ? for gpg signing
  )

  print_status "Installing core development tools..."
  brew install "${tools[@]}"

  # Install fonts (macOS only, Linux users need manual font setup)
  if [[ "$OS" == "macos" ]]; then
    print_status "Installing Nerd Fonts..."
    brew tap homebrew/cask-fonts
    brew install --cask font-jetbrains-mono-nerd-font font-fira-code-nerd-font font-fira-mono-nerd-font
  else
    print_warning "Font installation skipped on Linux. Install Nerd Fonts manually if needed."
  fi

  print_status "âœ“ Development tools installed"
}

# Set zsh as default shell
set_default_shell() {
  print_header "Setting Zsh as Default Shell"

  if [[ "$SHELL" == *"zsh"* ]]; then
    print_status "Zsh is already the default shell"
    return 0
  fi

  local zsh_path
  zsh_path=$(command -v zsh)

  # Add to /etc/shells if not already there
  if ! grep -q "$zsh_path" /etc/shells 2>/dev/null; then
    echo "$zsh_path" | sudo tee -a /etc/shells > /dev/null
    print_status "Added $zsh_path to /etc/shells"
  fi

  # Change default shell
  chsh -s "$zsh_path"
  print_status "âœ“ Default shell set to zsh"
}

# Stow dotfiles
stow_dotfiles() {
  print_header "Setting up Dotfiles"

  # Check if we're in a dotfiles directory
  if [[ ! -f ".stowrc" || ! -f ".zshrc" ]]; then
    print_warning "Not in a dotfiles directory with .stowrc and .zshrc"
    print_status "Skipping automatic dotfile stowing"
    print_status "To stow dotfiles later:"
    print_status "1. cd to your dotfiles directory"
    print_status "2. Run: stow ."
    return 0
  fi

  print_status "Dotfiles directory detected, proceeding with stow..."

  # Check if any files would be overwritten
  if stow --no --verbose=2 . 2>&1 | grep -q "would conflict"; then
    print_warning "Some dotfiles already exist and would conflict"
    echo ""
    read -p "Do you want to continue and potentially overwrite existing files? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      print_status "Skipping dotfile stowing - you can run 'stow .' manually later"
      return 0
    fi
  fi

  # Run stow
  if stow .; then
    print_status "âœ“ Dotfiles successfully stowed!"
    print_status "Symlinks created in home directory pointing to dotfiles repo"
  else
    print_error "Failed to stow dotfiles"
    print_status "You can try running 'stow .' manually from the dotfiles directory"
    return 1
  fi
}

# Verify installation
verify_installation() {
    print_header "Verifying Installation"

    local tools=(
        "zsh" "starship" "fzf" "eza" "bat" "rg" "fd" "zoxide"
        "git" "gh" "nvim" "tmux" "go" "fnm" "stow"
    )

    local missing=()

    for tool in "${tools[@]}"; do
        if command -v "$tool" > /dev/null 2>&1; then
            print_status "âœ“ $tool"
        else
            print_warning "âœ— $tool not found"
            missing+=("$tool")
        fi
    done

    if [[ ${#missing[@]} -eq 0 ]]; then
        print_status "ðŸŽ‰ All tools successfully installed!"
    else
        print_warning "Some tools are missing: ${missing[*]}"
    fi
}

# Main installation function
main() {
  print_header "Development Environment Setup"

  echo "This script will install:"
  echo "  â€¢ Homebrew (package manager)"
  echo "  â€¢ Zsh with modern plugins"
  echo "  â€¢ Development tools (neovim, tmux, git, etc.)"
  echo "  â€¢ Stow dotfiles (if run from dotfiles directory)"
  echo ""

  read -p "Continue? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_status "Installation cancelled"
    exit 0
  fi

  install_homebrew
  install_dev_tools
  set_default_shell
  verify_installation
  stow_dotfiles

  print_header "Installation Complete!"
  echo ""
  print_status "ðŸŽ‰ Development environment setup finished!"
  echo ""
  print_status "Next steps:"
  print_status "1. Restart your terminal or run: exec zsh"
  print_status "2. Plugins will install automatically on first zsh run"
  echo ""
  print_status "Version managers installed:"
  print_status "â€¢ fnm for Node.js: fnm install <version>, fnm use <version>"
  print_status "â€¢ g for Go: g install <version>, g <version>"
  echo ""
  print_status "ðŸš€ Happy coding!"
}

# Run main function
main "$@"
